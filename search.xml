<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringSecurity5.x自定义登录页面后登出功能404的原因</title>
      <link href="/2020/07/18/SpringSecurity5.x%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%90%8E%E7%99%BB%E5%87%BA%E6%8C%89%E9%92%AE%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2020/07/18/SpringSecurity5.x%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%90%8E%E7%99%BB%E5%87%BA%E6%8C%89%E9%92%AE%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>​    最近在学习Spring Boot整合Spring Security的过程中，当使用Spring Security默认的登录页时，登录功能和登出功能均可正常使用，但是当使用自定义的登录页面时，登出功能却会出现404的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"vip1"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"vip2"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"vip3"</span>);</span><br><span class="line"></span><br><span class="line">        http.formLogin();</span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a>    <p>​    默认的登录页面</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/1.png" alt="登录功能"></p><p>​    请求登出url<code>/logout</code>时的页面，点击logout即可成功退出登录</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/2.png" alt="请求默认的登出功能"></p><p>​    但是当把默认的登录页换成自定义的页面时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"vip1"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"vip2"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"vip3"</span>);</span><br><span class="line">        </span><br><span class="line">        http.formLogin().loginPage(<span class="string">"/toLogin"</span>).loginProcessingUrl(<span class="string">"/login"</span>);</span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    自定义的登录页面</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/3.png" alt="自定义的登录页面"></p><p>​    再次请求登出url，可以看到出现了404</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/4.png" alt></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><h2 id="定位问题发生的“trigger”"><a href="#定位问题发生的“trigger”" class="headerlink" title="定位问题发生的“trigger”"></a>定位问题发生的“trigger”</h2><p>​    <strong>可以看到在不自定义登录页的情况下，请求/logout，为get请求，会出现默认的确认登出页，点击Log Out后，发送post请求登出。这是很好理解的。但是在自定义登录页的情况下，请求同样为/logout，为get请求，为什么会出现404呢？难道相同url还有高低贵贱之分？？？？</strong></p><h2 id="源码打断点调试"><a href="#源码打断点调试" class="headerlink" title="源码打断点调试"></a>源码打断点调试</h2><p>​    首先分析源码，猜测在发出<code>/logout</code>请求后，会由LogoutFilter这个过滤器首先拦截请求进行过滤，在doFilter方法中，可以看到先调用了<code>requiresLogout()</code>方法进行判断，若这个方法返回false，则把请求转向接下来的过滤器</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/5.png" alt></p><p>​    进入<code>requiresLogout()</code>方法，发现其又调用了<code>logoutRequestMatcher</code>的<code>matches()</code>方法，在此处打断点，发现<code>logoutRequestMatcher</code>是<code>RequestMatcher</code>接口的实现，而这个实现类是<code>AntPathRequestMatcher</code></p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/6.png" alt></p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/7.png" alt></p><p>​    接下来进入<code>AntPathRequestMatcher</code>找到<code>matches</code>的具体实现并在此处打断点</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/8.png" alt></p><p>​    通过断点信息可知，<code>httpMethod</code>的值为POST，当这个请求的方法和<code>httpMethod</code>不同时，这个方法返回false，往回分析可知，当用get方法请求<code>/logout</code>时，最终<code>requiresLogout()</code>这个方法返回false，所以会继续向下执行后面的过滤器，那么为什么，同样都是get请求，另一种方式就会得到一个确认登出的页面呢。</p><p>​    那么来对比下两种情况下，执行过滤器的流程吧= =</p><p>​    这是使用了自定义登录页的过滤器链</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/9.png" alt></p><p>​    这是使用默认登录页的过滤器链</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/10.png" alt></p><p>​    观察这两者的差异，发现后者多执行了两个Filter，隐约预感到很操蛋的事情要发生了。见名知义，这应该是生成默认登录登出页的过滤器，进去康康！</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/11.png" alt></p><p>​    显然，这个Filter的<code>matcher</code>属性初始化成了一个/logout的get请求，在<code>doFilterInternal</code>方法中，如果请求为get请求，那么执行<code>renderLogout</code>方法，图中可以隐隐看到这个方法会生成一个确认退出的页面的html，我都艹了，原来是这样啊。</p><h2 id="问题原理"><a href="#问题原理" class="headerlink" title="问题原理"></a>问题原理</h2><ul><li>使用默认登录页面的情况下<ul><li>get请求/logout</li><li>LogoutFilter拦截发现这是get请求，因此直接放行</li><li>后面执行到DefaultLogoutPageGeneratingFilter，发现是get请求，生成默认登出页面</li><li>点击Log Out后发送post请求的/logout</li><li>LogoutFilter拦截发现是post请求，因而执行登出方法</li><li>登出成功</li></ul></li><li>使用自定义登录页面的情况下<ul><li>get请求/logout</li><li>LogoutFilter拦截发现这是get请求，因此直接放行</li><li>后面p都没有了，没过滤器帮生成页面，所以就404了</li></ul></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>直接使用post请求/logout</p></li><li><p>自定义RequestMatcher使得get请求也能执行登出操作</p><p><code>http.logoutRequestMatcher(new OrRequestMatcher(new AntPathRequestMatcher(&quot;/logout&quot;, &quot;GET&quot;), new AntPathRequestMatcher(&quot;/logout&quot;, &quot;POST&quot;)));</code></p></li><li><p>把csrf功能关闭（不推荐，会造成安全问题）</p><p><code>http.csrf().disable();</code></p><p>为什么csrf功能会对get请求的logout生效呢？关闭它会不会对自动生成的RequestMatcher造成影响呢？</p><p>进入LogoutConfigurer类中，找啊找，找到了一个createLogoutFilter方法</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/12.png" alt></p><p>再点进那个getLogoutRequestMatcherr方法查看</p><p><img src="/2020/07/18/SpringSecurity5.x自定义登录页面后登出按钮失效的原因/13.png" alt></p><p>可以看到，若加载了csrf相关的配置，那么就会返回一个只接收POST请求的AntPathRequestMatcher，否则就会返回一个四种请求的OrRequestMatcher，若csrf未开启，则不会加载csrf相关配置，因此生成一个可接收四种请求的OrRequestMatcher。</p></li></ul><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在Spring Security中，所有的默认页面都是由一个个Filter页面生成的，因此要执行对应的Filter链才会生效，同时这几种解决办法中，最好不要使用csrf那个，因为会造成安全隐患。</p><p>在前后端分离开发中可能不会遇到此问题，因为后端会自定义登录登出接口，前端负责控制路由分发。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.x自动装配原理</title>
      <link href="/2020/07/18/SpringBoot2-x%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E6%B5%85%E6%9E%90/"/>
      <url>/2020/07/18/SpringBoot2-x%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot2-x自动装配原理"><a href="#SpringBoot2-x自动装配原理" class="headerlink" title="SpringBoot2.x自动装配原理"></a>SpringBoot2.x自动装配原理</h1><blockquote><p>SpringBoot依赖默认版本的配置位置</p></blockquote><p>在pom.xml可以看到当前其父节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点进<code>spring-boot-starter-parent</code>中，再次看到其父依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点进<code>spring-boot-dependencies</code>中，发现其配置了不少依赖的默认版本，这也是在引入外部依赖时无需指定版本也能生效的原因</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.12<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.80<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    ............</span><br><span class="line">    ............</span><br><span class="line">    <span class="tag">&lt;<span class="name">webjars-hal-browser.version</span>&gt;</span>3325375<span class="tag">&lt;/<span class="name">webjars-hal-browser.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webjars-locator-core.version</span>&gt;</span>0.45<span class="tag">&lt;/<span class="name">webjars-locator-core.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wsdl4j.version</span>&gt;</span>1.6.3<span class="tag">&lt;/<span class="name">wsdl4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xml-maven-plugin.version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">xml-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xmlunit2.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">xmlunit2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动器</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动器的作用：自动导入当前环境所需的所有依赖</li><li>比如<code>spring-boot-starter-web</code>会导入web环境所需的所有依赖</li><li>SpringBoot会将所有的功能场景，封装成一个个starter，在使用时我们只需引入对应的starter即可</li></ul><blockquote><p>主程序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.biao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockertestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DockertestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>标注了@SpringBootApplication且在main方法中执行了run()方法为SpringBoot的主配置类，点进去看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><p>首先看到了前面四个元注解以及后面三个注解@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan</p><ul><li>@ComponentScan配置一些注解扫描相关的过滤信息</li></ul><p>重点看@SpringBootConfiguration以及@EnableAutoConfiguration</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Configuration.class</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其上标注了@Configuration，表示这是Spring的一个配置类，从而说明了标注了@SpringBootApplication的为SpringBoot的主配置类</li></ul><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br></pre></td></tr></table></figure><ul><li>@AutoConfigurationPackage，见名知义，这是自动配置包的注解</li><li>@Import(AutoConfigurationImportSelector.class)，见名知义，导入了一个自动配置选择器</li></ul><h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span><br></pre></td></tr></table></figure><p>可以看到导入了Registrar这个组件，查看Registrar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImports(metadata));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面实现了两个方法，第一个为registerBeanDefinitions，可以看到是注册Bean的定义，说明这是由Spring管理的，在此处打断点，看看能不能获得一些变量的相关信息</p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/1.png" alt></p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/2.png" alt></p><p>通过断点信息可以看到metadata的内容，可以看出是和主配置类相关联的，再获取下包名</p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/3.png" alt></p><p>可以看到包名是com.biao</p><p>总结就是，@AutoConfigurationPackage这个注解会将主启动类所在包路径和com.biao这个包路径下的所有组件注册到Spring容器中进行管理</p><h4 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h4><p>SpringBoot每次启动并不会加载所有默认依赖的配置，因为一个项目并不会引入所有的依赖，如果全加载那一定是很耗资源的行为，因此，SpringBoot只帮我们配置我们需要的和它一些核心的，那么都是哪些呢？</p><p>进入<code>AutoConfigurationImportSelector.class</code>看看</p><p>可以看到里面有特别多的方法，那么具体是怎么执行的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法会将所有的配置信息以字符串数组的方式返回，获得方式为getAutoConfigurationEntry方法，进入这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点在第6，7行，这两行拿到了所有的配置信息，打断点查看</p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/4.png" alt></p><p>这些信息来自第六行的getCandidateConfigurations方法，进入这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">                                                                         getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">                    + <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了SpringFactoriesLoader.loadFactoryNames方法来获得配置信息，再断言一下配置信息是否为空，可以看到断言输出的提示为，没有找到自动配置类在<code>META-INF/spring.factories</code>中，那么配置会不会在这里面呢？</p><p>进入loadFactoryNames方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会鲜活的传入的引用factoryType的所有类名，再根据classLoader获得这些类名对应的List，也就是说和传入的factoryType有关，那么factoryType是啥呢？回到之前的getCandidateConfigurations方法，可以看到factoryType是<code>getSpringFactoriesLoaderFactoryClass()</code>获取的，进去看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以factoryType的值就是EnableAutoConfiguration.class，也就是说，loadFactoryNames会将所有标注了EnableAutoConfiguration的配置导入。</p><p>继续向下看loadSpringFactories方法</p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/5.png" alt></p><p>可以看到它从<code>META-INF/spring.factories</code>中读取内容，进入这个文件</p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/6.png" alt></p><p>一目了然，这里就是所有标注了EnableAutoConfiguration的配置类</p><p>随便进一个熟悉的看看</p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/7.png" alt></p><p><img src="/2020/07/18/SpringBoot2-x自动装配原理以及启动流程浅析/8.png" alt></p><p>看那个@EnableConfigurationProperties的注解，字面意思是允许配置Properties，那么其对应的DataSourceProperties，可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProperties</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> generateUniqueName = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Class&lt;? extends DataSource&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String driverClassName;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">    .......</span><br><span class="line">        .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头上的注解就是从application.properties或application.yaml中读取对应前缀的值，下面这些变量，很眼熟了吧？肯定总配置</p><p>以上就是SpringBoot加载配置的全过程</p><blockquote><p>结论</p></blockquote><p>这些过程精简起来，SpringBoot自动配置过程就是</p><ul><li>点击启动</li><li>Spring找到标注了@SpringBootApplication的类</li><li>@SpringBootConfiguration将这个类交给Spring容器管理</li><li>@EnableAutoConfiguration开启自动配置</li><li>@AutoConfigurationPackage告诉Spring要加载哪个包下的配置</li><li>@Import(AutoConfigurationImportSelector.class)告诉Spring要加载标注了EnableAutoConfiguration的配置</li><li>在spring.factories中找到对应的配置，通过<code>application.properties</code>中设置的值进行配置</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5框架中的IoC容器原理笔记</title>
      <link href="/2020/05/25/IOC%E5%AE%B9%E5%99%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2020/05/25/IOC%E5%AE%B9%E5%99%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h1><h2 id="什么是IoC？"><a href="#什么是IoC？" class="headerlink" title="什么是IoC？"></a>什么是IoC？</h2><p>  控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度，其中最常见的方式就是我们的老朋友——依赖注入（DI），还有一种方式叫依赖查找。</p><a id="more"></a><p>  通过控制反转，对象在创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。比如Laravel框架中的</p><p><code>public function func(Request $request){...}</code></p><ul><li>控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IoC的目的：使耦合度降低</li></ul><h2 id="IoC底层原理"><a href="#IoC底层原理" class="headerlink" title="IoC底层原理"></a>IoC底层原理</h2><p><strong>传统调用对象中方法的方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在下面的类中调用User中的add方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExample</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：User类和UserExample的耦合度很高，也就是说，一旦User有了改动，比如User类换了位置，UserExample中也要跟着修改。这时衍生出了工厂模式来松耦合度</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式的出现，是为了松User和UserExample之间的耦合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时User和UserExample解耦，但是新的问题出现了，即UserExample和UserFactory又耦合住了。所以还需要进一步解耦，最终的目的是将耦合度降到最低（耦合度不可能完全消失）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExample</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = UserFactory.getUser();</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IoC的过程（针对Spring5框架）"><a href="#IoC的过程（针对Spring5框架）" class="headerlink" title="IoC的过程（针对Spring5框架）"></a>IoC的过程（针对Spring5框架）</h3><ul><li>第一步：xml配置文件中配置创建的对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"package.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二步：有User类和UserExample类，创建工厂类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// xml解析，解析方法有dom4j等工具</span></span><br><span class="line">        String classValue = bean中<span class="class"><span class="keyword">class</span>属性的值</span>;</span><br><span class="line">        <span class="comment">// 通过反射创建对象</span></span><br><span class="line">        Class instance = Class.forName(classValue);</span><br><span class="line">        <span class="keyword">return</span> (User)instance.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们使用时只需要简单的修改配置文件，对象创建的过程都交给了IoC容器</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web技术 </tag>
            
            <tag> IoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pthreadGetPI</title>
      <link href="/2019/10/30/pthreadGetPI/"/>
      <url>/2019/10/30/pthreadGetPI/</url>
      
        <content type="html"><![CDATA[<h1 id="利用UNIX的C语言多线程求pi的值"><a href="#利用UNIX的C语言多线程求pi的值" class="headerlink" title="利用UNIX的C语言多线程求pi的值"></a>利用UNIX的C语言多线程求pi的值</h1><p>学校留的题目，造福学弟学妹嘿嘿嘿</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int N,t;</span><br><span class="line">double sum=0;</span><br><span class="line">pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line">// 公式部分</span><br><span class="line">double formula(int i)&#123;</span><br><span class="line">double part1 = (((double)i+0.5)/(double)N) * (((double)i+0.5)/(double)N);</span><br><span class="line">double part2 = 4/(part1+1.0);</span><br><span class="line">return (part2 / (double)N);</span><br><span class="line">&#125;</span><br><span class="line">// 每个线程执行的动作</span><br><span class="line">void *thread(void *ID)&#123;</span><br><span class="line">int i;</span><br><span class="line">double part_sum=0;</span><br><span class="line">int id = (int)ID;</span><br><span class="line">int length = N/t;</span><br><span class="line">int begin= id*length;</span><br><span class="line">int end = (id+1)*length;</span><br><span class="line">for(i = begin; i&lt;end; i++)&#123;</span><br><span class="line">part_sum += formula(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line">sum += part_sum;</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;N);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">//为线程池分配空间</span><br><span class="line">pthread_t *threads;</span><br><span class="line">int i;</span><br><span class="line">threads = (pthread_t *)malloc(sizeof(pthread_t)*t);</span><br><span class="line">pthread_mutex_init(&amp;mutex, NULL);</span><br><span class="line">//创建t个线程</span><br><span class="line">for(i = 0; i &lt; t; i++)&#123;</span><br><span class="line">if(pthread_create(&amp;threads[i],NULL,thread,(void*)i))&#123;</span><br><span class="line">printf(&quot;create %dth thread error\n&quot;, i+1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;%dth thread create success\n&quot;, i+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//等待所有的线程结束</span><br><span class="line">for(i = 0; i &lt; t; i++)&#123;</span><br><span class="line">if(pthread_join(threads[i], NULL))&#123;</span><br><span class="line">printf(&quot;%dth thread join error\n&quot;, i+1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;%dth thread join success\n&quot;, i+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">printf(&quot;%.20f\n&quot;, sum);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校的作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Swoole框架实现简单WebSocket通信</title>
      <link href="/2019/09/03/WebSocket-Swoole/"/>
      <url>/2019/09/03/WebSocket-Swoole/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket简介"><a href="#WebSocket简介" class="headerlink" title="WebSocket简介"></a>WebSocket简介</h1><p><strong>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</strong></p><p><strong>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯</strong></p><p><strong>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据</strong></p><h2 id="煮个栗子"><a href="#煮个栗子" class="headerlink" title="煮个栗子"></a>煮个栗子</h2><p>假如客户端执行某个操作后，比如点击签到，然后实时显示xxx用户已经签到，并显示签到用户的信息</p><a id="more"></a><ul><li>AJAX轮询（定时 请求—响应）<ul><li>在并发数少，服务器荷载较小时作用和WebSocket效果几乎相同</li><li>高并发时，频繁的轮询会给服务器带来巨大压力，严重时服务器会宕机</li></ul></li><li>WebSocket通信<ul><li>客户端和服务端建立全双工通道（长连接）</li><li>服务端可以主动向客户端推送消息，减轻频繁请求对服务器的负担</li></ul></li></ul><h1 id="Swoole实现WebSocket通信"><a href="#Swoole实现WebSocket通信" class="headerlink" title="Swoole实现WebSocket通信"></a>Swoole实现WebSocket通信</h1><ul><li>环境<ul><li>Homestead<ul><li>Ubuntu 18.04</li><li>PHP 7.3.1</li><li>安装Swoole扩展</li></ul></li></ul></li></ul><p><code>Homestead的配置教程网上有好多，此处不做赘述~</code></p><ul><li>server.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$server = <span class="keyword">new</span> swoole_websocket_server(<span class="string">"192.168.10.10"</span>, <span class="number">9502</span>);</span><br><span class="line"></span><br><span class="line">$server-&gt;on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span><span class="params">($server, $req)</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"connection open: &#123;$req-&gt;fd&#125;\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$server-&gt;on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">($server, $frame)</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"received message: &#123;$frame-&gt;data&#125;\n"</span>;</span><br><span class="line">$server-&gt;push($frame-&gt;fd, <span class="string">'你好，客户端，我是服务器'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$server-&gt;on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span><span class="params">($server, $fd)</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"connection close: &#123;$fd&#125;\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$server-&gt;start();</span><br></pre></td></tr></table></figure><ul><li>testWebSocket.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var ws = new WebSocket("ws://192.168.10.10:9502");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            ws.onopen = function(event)&#123;</span></span><br><span class="line"><span class="undefined">               console.log("成功建立WebSocket连接!");</span></span><br><span class="line"><span class="undefined">               ws.send("你好，服务器，我是客户端");</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            ws.onmessage= function(event)&#123;</span></span><br><span class="line"><span class="undefined">               console.log("服务器向你说："+event.data);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            ws.onclose = function(event)&#123;</span></span><br><span class="line"><span class="undefined">                console.log("连接已关闭");</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vagrant中执行<code>php server.php</code></p><p>用浏览器（Chrome, FireFox等）打开testWebSocket.html，按F12打开开发者选项，然后点Console进入控制台，若观察到以下输出，则证明成功连接！</p><p><img src="/2019/09/03/WebSocket-Swoole/1.png" alt></p><p>此时，服务端(Homestead)会输出以下信息</p><p><img src="/2019/09/03/WebSocket-Swoole/2.png" alt></p><p><strong>END</strong></p>]]></content>
      
      
      <categories>
          
          <category> Swoole </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2019/08/31/Git/"/>
      <url>/2019/08/31/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础操作命令"><a href="#Git基础操作命令" class="headerlink" title="Git基础操作命令"></a>Git基础操作命令</h1><ul><li><code>git init</code> 初始化仓库</li><li><code>git add</code> 将更改添加到仓库</li><li><code>git commit</code>将更改提交到仓库<ul><li><code>git commit -m &quot;message&quot;</code>将更改提交到仓库，并用message作说明</li><li><code>git commit -a -m &quot;message&quot;</code>免去<code>git add</code>这一步直接提交到仓库</li></ul></li><li><code>git status</code>查看当前版本库的状态，哪个改了，哪个还没提交等</li><li><code>git log</code>用来查看commit记录</li></ul><a id="more"></a><ul><li><code>git diff filename</code>比较这个文件和上个版本的区别 <strong>这个文件是没有执行add命令才能比较，不让什么都不输出</strong><ul><li><code>git diff commit-id1 commit-id2</code>比较两次commit记录的不同</li><li><code>git diff HEAD^ filename</code>有几个^就比较工作区和几个版本前的区别，^太多时比如100写作<code>HEAD~100</code></li><li><code>git diff commit-id filename</code>比较工作区文件和指定commit-id记录的不同</li></ul></li><li><code>git reset --hard HEAD^</code>有几个^就回退到几个版本前<ul><li><code>git reset --hard commit-id</code>回退到指定版本</li><li><strong>这里加粗说一下<code>--hard</code>的危险，加了这个参数，不光commit记录会回退到那个版本，连本地文件也会回退到那个版本的内容，此时如果你记得之后某次版本的commit-id是可以再挽救回来的。否则，嘿嘿嘿，就得用很玄学的办法<code>git reflog</code>来解决了，这个可以显示历史commit的id</strong></li></ul></li><li><code>git checkout -- filename</code>丢弃某个文件的当前修改，比如你修改后还没add到暂存区，执行后就会回到修改之前的亚子，你修改后add到暂存区又修改了，那么就会回到add后的亚子</li><li><code>git reset HEAD filename</code>撤销add</li><li><code>git rm filename</code>删除版本库中的某个文件，不常用</li></ul><p><strong>本地开发的项目推送到远程</strong></p><p>在没有远程仓库的前提下，建完远程仓库，让后到你项目文件夹下，如果还没<code>git init</code>那就先执行这个，如果init了</p><p><code>git remote add origin 你的仓库链接</code>如果连了SSH就第一个，没连就第二个，如何连SSH不做赘述</p><p><img src="/2019/08/31/Git/捕获.PNG" alt></p><p>这样就和远程仓库关联起来了</p><ul><li><code>git push origin master</code>将修改push到远程master分支</li><li><code>git push origin myBranch</code>将修改push到远程myBranch分支</li></ul><p><strong>从远程库克隆项目</strong></p><p>用我们组常用的laravel为例，几个人想一起开发一个项目，那么第一个人先关联远程仓库，别的人就可以直接克隆这个项目到本地了</p><ul><li><code>git clone 他的仓库链接</code>和remote的一样</li></ul><p><strong>分支的重要性</strong></p><p>开发时如果都在一个master分支上修改的话会造成很多冲突，导致git都傻了，不知道该信谁的</p><p>本地开发时可以建立一个自己的分支，开发自己的，最后再手动和master分支合并</p><ul><li><code>git checkout -b myBranch</code> -b表示创建并切换，相当于先执行<code>git branch myBranch</code>再执行<code>git checkout myBranch</code></li><li><code>git branch</code>查看当前所有分支</li><li><code>git merge myBranch</code>合并myBranch到当前分支，比如想合并到master就先切换到master再执行</li></ul><p><strong>解决冲突</strong></p><p>如果myBranch和master都在同文件做了修改，那么merge的时候很可能就会冲突，这时就要手动解决冲突</p><ul><li><p><code>git status</code>可以告诉我们冲突的文件</p></li><li><p>冲突的文件中git会帮你标出不同分支的修改，如图所示</p><p><img src="/2019/08/31/Git/1.PNG" alt></p><p>这时候就要根据自己择优选择改成啥，把这些都删了然后改成你想要的，然后add加commit二连就解决了</p></li></ul><p><strong>Bug分支</strong></p><p>如果你正开发自己的分支，还不能提交更改，这时朋哥给你打电话说哪个地方有bug，亟待解决，但是你肯定不能放弃手头的工作啊，这时，你可以先把自己的分支藏起来，然后新建一个处理bug的分支解决</p><ul><li><code>git stash</code>这个命令可以把你现在的分支藏起来，然后比如说要在master上改bug，就切换到master分支下，然后新建bug的分支，修改完，删除bug分支，再切回自己的分支</li><li><code>git stash list</code>可以列出被藏起来的分支</li><li><code>git stash apply stash@{一个数字}</code>恢复你的分支</li><li><code>git stash drop</code>删除stash的内容</li><li><code>git stash pop</code>一步到位，恢复加删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么？！你的Unipus不安全？！</title>
      <link href="/2019/04/02/BreakUnipus/"/>
      <url>/2019/04/02/BreakUnipus/</url>
      
        <content type="html"><![CDATA[<p><strong>众所周知，破解各大学习平台和校园办公网是广大计算机学子喜闻乐见的事</strong></p><p><strong>那么，攻击一个网站最简单的方式就是进行SQL注入或XSS攻击</strong></p><ul><li>SQL注入攻击<ul><li>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</li></ul></li></ul><a id="more"></a><ul><li>什么时候最容易受到SQL注入攻击<ul><li>登录</li><li>查询</li></ul></li><li>例子<ul><li>假设我们的输入的用户名为<code>xiaoming</code> 密码为<code>&#39;123456&#39;</code>  来看一条正常的SQL语句<code>SELECT * FROM User WHERE username=&#39;xiaoming&#39; AND password=&#39;123456&#39;</code>执行完成之后便会获得’xiaoming’的用户信息，那么如果未进行SQL注入防御的话，我只需要在填写密码的时候输入<code>&quot; &#39;or 1 or&#39; &quot;</code>注意左右是带两个单引号的，那么SQL语句就会变为<code>SELECT * FROM User WHERE username=&#39;biao&#39; AND password=&#39;&#39;or 1 or&#39;&#39;</code> 这样就够造成了一个永真式，依然可以获得’xiaoming’的用户信息</li></ul></li></ul><p><strong>经高人指导，得知我校Unipus平台是可以进行SQL注入的，而且这网站数据库的Debug没关，这就为攻破带了了更多方便的地方</strong></p><ul><li>先随便攻击一下试试，输入<code>&#39;a&#39;</code></li></ul><p><img src="/2019/04/02/BreakUnipus/TIM截图20190402223955.png" alt></p><p><strong>可以看到红线部分组成为 单引号’a’单引号，其中的’a’就是刚才输入的东西，接下来开始构造攻击语句</strong></p><p>在密码框中输入<code>&#39;or 1 or&#39;</code>注意左右两边一定要有单引号，且1左右各有一个空格，接下来就可进入任何已知学号人的Unipus平台</p><p><strong>PS：虽然进去也没啥卵用，不过可以偷偷看到你好奇的学号的名字哟~</strong></p><p>end</p>]]></content>
      
      
      
        <tags>
            
            <tag> 武林秘籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现简易图形验证码识别</title>
      <link href="/2019/03/27/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
      <url>/2019/03/27/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>突然发现自己写的爬虫都不带验证码识别，心血来潮学一学简单的识别原理（基础版   = v =）</strong></p><ul><li>准备工具<ul><li>Python3.6</li><li>库：PIL(用于处理图片) &amp; tesserocr(用于识别)  &amp;  claptcha(用于生成验证码)</li></ul></li></ul><p><strong>STEP 1：生成一张验证码</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> claptcha <span class="keyword">import</span> Claptcha</span><br><span class="line">c = Claptcha(<span class="string">"q6jn"</span>, <span class="string">"C:\Windows\Fonts\consola.ttf"</span>, noise=<span class="number">0.5</span>)</span><br><span class="line">t, _ = c.write(<span class="string">"q6jn.png"</span>)</span><br><span class="line"><span class="comment"># 目录下会多出一张图如下</span></span><br></pre></td></tr></table></figure><p><img src="/2019/03/27/Python实现简易图形验证码识别/q6jn.png" alt></p><p><strong>可以看到有一段干扰线，接下来的事情就是尽量让所有有效元素凸显出来</strong></p><p><strong>STEP 2：灰度，二值处理</strong></p><p>所谓的灰度，二值处理说白了就是把图片转换成黑白的，0为黑色，255为白色 所以是二值化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarizing</span><span class="params">(img, threshold)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对传入的图片对象进行灰度，二值处理</span></span><br><span class="line"><span class="string">    threshold为一个阈值，可以根据图片鲜艳程度而定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    img = img.convert(<span class="string">'L'</span>)  <span class="comment"># 灰度化</span></span><br><span class="line">    pixdata = img.load()</span><br><span class="line">    w, h = img.size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历像素点，进行二值化</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y] &lt; threshold:</span><br><span class="line">                pixdata[x, y] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>执行后效果如下，可以看到还是有很多噪点的</p><p><img src="/2019/03/27/Python实现简易图形验证码识别/q6jn_1.png" alt></p><p><strong>STEP 3：降噪</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depoint</span><span class="params">(bin_img)</span>:</span></span><br><span class="line">    <span class="string">"""利用8邻域算法对传入二值化后的图片进行降噪"""</span></span><br><span class="line">    pixdata = bin_img.load()</span><br><span class="line">    w, h = bin_img.size</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, h<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, w<span class="number">-1</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y<span class="number">-1</span>] &gt; <span class="number">245</span>:  <span class="comment"># 上</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y+<span class="number">1</span>] &gt; <span class="number">245</span>:  <span class="comment"># 下</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x<span class="number">-1</span>, y] &gt; <span class="number">245</span>:  <span class="comment"># 左</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x+<span class="number">1</span>, y] &gt; <span class="number">245</span>:  <span class="comment"># 右</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x<span class="number">-1</span>, y<span class="number">-1</span>] &gt; <span class="number">245</span>:  <span class="comment"># 左上</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x<span class="number">-1</span>, y+<span class="number">1</span>] &gt; <span class="number">245</span>:  <span class="comment"># 左下</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x+<span class="number">1</span>, y<span class="number">-1</span>] &gt; <span class="number">245</span>:  <span class="comment"># 右上</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x+<span class="number">1</span>, y+<span class="number">1</span>] &gt; <span class="number">245</span>:  <span class="comment"># 右下</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">4</span>:</span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> bin_img</span><br></pre></td></tr></table></figure><p>执行后效果如下</p><p><img src="/2019/03/27/Python实现简易图形验证码识别/q6jn_2.png" alt></p><p><strong>STEP 4：识别</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"></span><br><span class="line">p1 = Image.open(<span class="string">"q6jn_2.png"</span>)</span><br><span class="line">a = tesserocr.image_to_text(p1)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为_8649</span></span><br></pre></td></tr></table></figure><p>是的，翻车了，不过既然基础版，识别率必然不高= =。。。还要进一步处理，以后再见=v=</p>]]></content>
      
      
      
        <tags>
            
            <tag> 好玩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始利用github和hexo搭建免费的个人博客</title>
      <link href="/2019/03/16/Build-your-own-free-blog/"/>
      <url>/2019/03/16/Build-your-own-free-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>注册一个github账号</li><li>安装你系统对应的git，如windows系统就安装git for windows  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">廖雪峰大神的Git安装以及配置教程</a></li><li>安装nodejs、npm并配置好环境 <a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html" target="_blank" rel="noopener">nodejs、npm的安装教程</a></li><li>在任意磁盘新建一个叫做blog的文件夹用来存放你博客的代码</li></ul><h1 id="第一步：新建Github仓库"><a href="#第一步：新建Github仓库" class="headerlink" title="第一步：新建Github仓库"></a>第一步：新建Github仓库</h1><a id="more"></a><p><img src="/2019/03/16/Build-your-own-free-blog/1.png" alt="仓库信息的填写"></p><ul><li>仓库名称务必严格按照 你的Github名称.github.io填写 比如我的github叫WakenAworld 所以我就填WakenAworld.github.io</li></ul><h1 id="第二步：配置SSH-Key"><a href="#第二步：配置SSH-Key" class="headerlink" title="第二步：配置SSH Key"></a>第二步：配置SSH Key</h1><p><strong>为啥要配置SSH Key呢？</strong></p><p>​    因为SSH Key可以保证你提交代码的时候会提交到你自己的仓库里而不是别人的</p><p><strong>如何生成SSH Key呢？</strong></p><p>​    在git安装并配置好的前提下，进入你新建好的blog文件夹下，点击右键然后点Git Bash Here</p><p>然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;配置git时你的邮件地址&quot;</span><br></pre></td></tr></table></figure><p>连按三次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： </p><p><img src="/2019/03/16/Build-your-own-free-blog/2.png" alt></p><p><img src="/2019/03/16/Build-your-own-free-blog/3.png" alt></p><p><strong>测试是否成功</strong></p><p>在git中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi ***! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><h1 id="第三步：安装Hexo并生成你的博客页！"><a href="#第三步：安装Hexo并生成你的博客页！" class="headerlink" title="第三步：安装Hexo并生成你的博客页！"></a>第三步：安装Hexo并生成你的博客页！</h1><ul><li><strong>在git bash中执行以下代码，稍等片刻</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><ul><li><strong>进入你之前进入的blog文件夹下，执行以下命令初始化一个hexo博客</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><ul><li><strong>继续执行以下命令生成博客页</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ul><li><strong>开启本地监听端口</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>这时候在浏览器中输入localhost:4000 即可在本地脱机预览博客页（若输入后出现空白页面，则可能是4000这个端口被占用，解决办法自行百度xD，百度上有好多）</p><p><img src="/2019/03/16/Build-your-own-free-blog/4.png" alt="出现此图片说明成功啦！"></p><h1 id="第四步：修改配置文件"><a href="#第四步：修改配置文件" class="headerlink" title="第四步：修改配置文件"></a>第四步：修改配置文件</h1><p><strong>用记事本打开博客根目录下的<code>_config.yml</code>文件</strong></p><p><img src="/2019/03/16/Build-your-own-free-blog/5.png" alt></p><p><strong>在文件中找到<code>deploy:</code>开始时deploy下只有一个<code>type:</code>，我们需要修改一下，添加一点东西，代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: **********(换成你自己github仓库的SSH，获取方式如下图)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="/2019/03/16/Build-your-own-free-blog/6.png" alt></p><h1 id="第五步：发表你的第一篇博客"><a href="#第五步：发表你的第一篇博客" class="headerlink" title="第五步：发表你的第一篇博客"></a>第五步：发表你的第一篇博客</h1><p><strong>先安装一个扩展，在git bash中执行以下代码,稍等片刻即安装成功</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>然后在你的博客根目录下用git bash执行<code>hexo new &quot;我的第一篇博客&quot;</code>，hexo会在source/_post下自动为你生成名为<code>我的第一篇博客.md</code>的文件，用md文档编辑器(推荐Typora，轻巧好用)编辑后保存即可准备发布</strong></p><p><strong>一切就绪后，在你的博客根目录下用git bash执行<code>hexo d -g</code>即可将所有更改push到你的远程github仓库中，等几分钟后，在浏览器输入 <code>你的github名称.github.io</code>就可以进入你的博客主页了，谁都可以访问噢。All Done.</strong></p><p><strong>接下来就是安装配置你喜欢的主题了，Github上有很多美观的开源hexo主题。选择喜欢的主题克隆到hexo/themes/即可，并在之前的<code>_config.yml</code>中修改<code>theme: landscape</code>，把landscape改为你的主题的仓库名字就可以用了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬取天津大学课表</title>
      <link href="/2019/03/15/Hello-Hexo/"/>
      <url>/2019/03/15/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<p>需要的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> xlwt  <span class="comment">#用来写入Excel</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment">#模拟浏览器行为</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> getpass  <span class="comment">#隐藏输入的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还要单独安装chromedriver</span></span><br></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>由于校园办公网的课程表页是用js渲染出来的而不是静态页面，所以不直接用requests库去get页面，那样得到的网页源代码是不经js渲染的，而校园网又没有提供接口，所以只能暴力解决。Selenium神器登场</p><a id="more"></a><ul><li>定位登录页面元素</li><li>自动登录</li><li>自动进入课程表页</li><li>获取渲染后的网页源代码</li><li>BeautifulSoup解析</li><li>写入数据</li></ul><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取渲染后的代码</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://classes.tju.edu.cn"</span></span><br><span class="line">username = input(<span class="string">"学号："</span>)</span><br><span class="line">password = getpass.getpass(<span class="string">"密码："</span>)</span><br><span class="line"></span><br><span class="line">browser.get(url)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element_by_name(<span class="string">'username'</span>).send_keys(username)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element_by_name(<span class="string">'password'</span>).send_keys(password)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element_by_name(<span class="string">'submit'</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeMain'</span>)</span><br><span class="line">browser.find_element_by_xpath(<span class="string">"//div[@class='inner-list-2']/a[@href='/eams/courseTableForStd.action']"</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">html = browser.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位课程表</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># print(soup)</span></span><br><span class="line">table = soup.find(<span class="string">'table'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'manualArrangeCourseTable'</span>&#125;)</span><br><span class="line">trs = table.find_all(<span class="string">'tr'</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># tds = trs[2].find_all('td')</span></span><br><span class="line"><span class="comment"># print(tds[1].text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入课程表</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'0'</span>: [],</span><br><span class="line">    <span class="string">'1'</span>: [],</span><br><span class="line">    <span class="string">'2'</span>: [],</span><br><span class="line">    <span class="string">'3'</span>: [],</span><br><span class="line">    <span class="string">'4'</span>: [],</span><br><span class="line">    <span class="string">'5'</span>: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">12</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(trs[i], bs4.element.Tag):</span><br><span class="line">        tds = trs[i].find_all(<span class="string">'td'</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">            a = str(int(i/<span class="number">2</span>))</span><br><span class="line">            <span class="comment"># print(a)</span></span><br><span class="line">            data[a].append(tds[j].text)</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">browser.close()</span><br><span class="line"><span class="comment"># 初始化表格</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">'课程表'</span>)</span><br><span class="line">worksheet.col(<span class="number">0</span>).width = <span class="number">4000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    worksheet.col(i).width = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">style = xlwt.XFStyle()</span><br><span class="line">font = xlwt.Font()</span><br><span class="line">font.name = <span class="string">"宋体"</span></span><br><span class="line">font.height = <span class="number">13</span> * <span class="number">20</span></span><br><span class="line">alignment = xlwt.Alignment()</span><br><span class="line">alignment.horz = xlwt.Alignment.HORZ_CENTER</span><br><span class="line">alignment.vert = xlwt.Alignment.VERT_CENTER</span><br><span class="line">style.font = font</span><br><span class="line">style.alignment = alignment</span><br><span class="line"></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"节次"</span>, style)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">    a = str(i)</span><br><span class="line">    worksheet.write(<span class="number">0</span>, i, <span class="string">"星期"</span> + a, style)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    b = str(j)</span><br><span class="line">    c = str(<span class="number">2</span> * j)</span><br><span class="line">    worksheet.write(j, <span class="number">0</span>, <span class="string">"第"</span> + b + <span class="string">"节"</span> + <span class="string">'\n'</span> + <span class="string">"第"</span> + c + <span class="string">"节"</span>, style)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        worksheet.write(i, j, data[str(i<span class="number">-1</span>)][j<span class="number">-1</span>], style)</span><br><span class="line"></span><br><span class="line">workbook.save(<span class="string">'课程表.xls'</span>)</span><br></pre></td></tr></table></figure><p><strong>终端运行！！！！！！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
